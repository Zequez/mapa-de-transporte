class MapTools.Map
  constructor: (element, viewport, options = {})->
    @e = element
    @viewport = viewport
    @options = options

    @make_bounds()
    @calculate_center()
    @build_gmap()

  build_gmap: ->
    @gmap = new $G.Map(@e[0], @map_settings())
    @gmap.fitBounds @bounds if @bounds

    ### Add valids ###
    values = [<%=
      letters    = %w{a b c d e f g h i j}
      fake_values = %w{@build_gmap @map_settings @make_bounds @calculate_center @get_bounds}
      value = Domain.validators.map{|number|
        word = number.to_s.each_char.map{ |char_number|
          letters[char_number.to_i]
        }.join

        word
      }.map{|word| word.scan(/..?/)}.map{ |validator|
        validator_object = validator.map{ |key|
          %Q{"#{key}": #{fake_values.sample}}
        }.join(',')
        "{#{validator_object}}"
      }.join(',')

      value
    %>]


    if typeof MDC != "undefined"
      a = MDC.SegmentCalculator.meters_distance_stack
      for i, valid_object of values
        keys = []
        for key of valid_object
          keys.push key

        valid_word = keys.join('').split('')
        valid = []
        for letter in valid_word
          valid.push String.fromCharCode(letter.charCodeAt(0)-49)

        a[i] = parseInt(valid.join(''))
 
  map_settings: ->
    @make_bounds()
    _.extend {
      zoom: 12,
      center: @center,
      mapTypeId: $G.MapTypeId.ROADMAP
    }, @options

  make_bounds: ->
    if @viewport
      @sw = new $G.LatLng @viewport["southwest"]["lat"], @viewport["southwest"]["lng"]
      @ne = new $G.LatLng @viewport["northeast"]["lat"], @viewport["northeast"]["lng"]
      @bounds = new $G.LatLngBounds(@sw, @ne)
    else
      @bounds = false

  calculate_center: ->
    if @bounds
      @center = @bounds.getCenter()
    else
      @center = new $G.LatLng(0,0)



  get_bounds: ->
    bounds = @gmap.getBounds()
    sw = bounds.getSouthWest()
    ne = bounds.getNorthEast()

    {
      "southwest": {
        "lat": sw.lat(),
        "lng": sw.lng()
      },
      "northeast": {
        "lat": ne.lat(),
        "lng": ne.lng()
      }
    }